{"version":3,"sources":["components/App.js","components/serviceWorker.js","index.js"],"names":["redirectTarget","process","REACT_APP_HOST","App","state","value","validUrl","encodedUrlReady","encodedUrl","copied","handleChange","event","_this","setState","target","handleSubmit","preventDefault","data","originalUrl","refs","fetch","concat","method","body","JSON","stringify","headers","Content-Type","then","response","ok","json","path","catpath","_this2","this","react_default","a","createElement","className","href","id","onSubmit","type","ref","placeholder","onChange","autoFocus","readOnly","lib","text","onCopy","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2PAIMA,SAAmFC,8CAAYC,gBAgHtFC,6MA5GbC,MAAQ,CACNC,MAAO,GACPC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,GACZC,QAAQ,KAGVC,aAAe,SAACC,GACdC,EAAKC,SAAS,CACZR,MAAOM,EAAMG,OAAOT,WAIxBU,aAAe,SAACJ,GACdA,EAAMK,iBAEN,IAAIC,EAAO,CACTC,YAAaN,EAAKO,KAAK,WAAWd,OAGpCe,MAAK,GAAAC,OAAIrB,EAAJ,WAA6B,CAChCsB,OAAQ,OACRC,KAAMC,KAAKC,UAAUR,GACrBS,QAAQ,CACNC,eAAgB,sBAEjBC,KAAK,SAAAC,GAEFA,EAASC,IACXD,EAASE,OAAOH,KAAK,SAAAG,GACnB,GAAa,cAATA,EACFnB,EAAKC,SAAS,CACZP,UAAU,QAEP,CACL,IAAI0B,EAAOD,EAAKE,QAChBrB,EAAKC,SAAS,CACZN,iBAAiB,EACjBD,UAAU,EACVE,WAAU,GAAAa,OAAKrB,EAAL,KAAAqB,OAAuBW,mFAQpC,IAAAE,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,UAAU,aAAtB,WAIFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,QAAMG,GAAG,UAAUC,SAAUP,KAAKpB,cAChCqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,gEACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOF,GAAG,QAAQF,UAAU,cAAcK,IAAI,UAAUvC,MAAO8B,KAAK/B,MAAMC,MAAOwC,YAAY,wBAAwBC,SAAUX,KAAKzB,aAAcqC,WAAS,IACvKX,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASJ,UAAU,iBAAiBlC,MAAM,eAK1D8B,KAAK/B,MAAME,SAIT,KAHF8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,wCAIHH,KAAK/B,MAAMG,iBAAmB4B,KAAK/B,MAAME,SACxC8B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,uBAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOJ,UAAWJ,KAAK/B,MAAMK,OAAS,iBAAmB,UAAWJ,MAAO8B,KAAK/B,MAAMI,WAAYwC,UAAQ,IAEtHZ,EAAAC,EAAAC,cAACW,EAAA,gBAAD,CAAiBC,KAAMf,KAAK/B,MAAMI,WAChC+B,UAAU,eACVY,OAAQ,kBAAMjB,EAAKrB,SAAS,CAACJ,QAAQ,MACrC2B,EAAAC,EAAAC,cAAA,yBAKN,KAEJF,EAAAC,EAAAC,cAAA,OAAKG,GAAG,gBACRL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,uHACEF,EAAAC,EAAAC,cAAA,aAAK,KAAM,KAAX,KADF,qIAjGMc,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.72e7ad3d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport '../css/App.css';\n\nconst redirectTarget = process.env.NODE_ENV == 'development' ? 'http://localhost:5500' : process.env.REACT_APP_HOST;\n\nclass App extends Component {\n\n  state = {\n    value: \"\", \n    validUrl: true,\n    encodedUrlReady: false,\n    encodedUrl: \"\",\n    copied: false\n  }\n  \n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    let data = {\n      originalUrl: this.refs['new-url'].value\n    };\n\n    fetch(`${redirectTarget}/encode`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      // console.log(response);\n      if (response.ok) {\n        response.json().then(json => {\n          if (json === \"Try again\") {\n            this.setState({\n              validUrl: false\n            });\n          } else {\n            let path = json.catpath;\n            this.setState({\n              encodedUrlReady: true,\n              validUrl: true,\n              encodedUrl: `${redirectTarget}/${path}`\n            })\n          }\n        });\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"nav\">\n          <a href=\"/\" className=\"nav-brand\">catURL</a>\n        </div>\n\n        \n        <div className=\"guts\">\n\n          <div className=\"message-contents\">\n            <form id=\"encoder\" onSubmit={this.handleSubmit}>\n              <div className=\"submit-encoder\">\n                <h3>enter an original url to create a custom cat url: </h3>\n                <input type=\"text\" id=\"notes\" className=\"encode-text\" ref=\"new-url\" value={this.state.value} placeholder=\"http://www.google.com\" onChange={this.handleChange} autoFocus />\n                <input type=\"submit\" className=\"btn submit-btn\" value=\"cattify\" />\n              </div>\n            </form>\n          </div>\n\n          {!this.state.validUrl ?\n            <div className=\"error-message\">\n              <h3>Please enter a valid URL.</h3>\n            </div>\n            : null } \n\n          {this.state.encodedUrlReady && this.state.validUrl ?\n            <div className=\"display-contents\">\n              <div className='display-intro'>\n                  <h3>is now: </h3>\n              </div>\n              <div className=\"display\">\n                  <input type=\"text\" className={this.state.copied ? \"copied new-url\" : \"new-url\"} value={this.state.encodedUrl} readOnly />\n\n                  <CopyToClipboard text={this.state.encodedUrl}\n                    className=\"btn copy-btn\"\n                    onCopy={() => this.setState({copied: true})}>\n                    <button>copy</button>\n                  </CopyToClipboard>\n\n              </div>\n            </div>\n            : null }\n\n          <div id=\"attribution\"></div>\n          <div className='disclaimer'>\n            <span>Intended for entertainment use only. No guarantees made. No one endorses anything contained in the URLs. \n              <p> {\"\\n\"}{\"\\n\"} </p>\n              CatURL is not responsible for any content linked through its service. Use at your own risk.  It's a litter bit amazing.\n            </span>\n          </div>\n        \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/reset.css';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}